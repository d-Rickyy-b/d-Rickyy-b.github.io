
import os
import re

content = ""

def deobfuscate(filename):
    global content
    with open(filename, "r", encoding="utf8") as f:
        content = f.read()
        
        content = content.replace("true && ", "") # remove redundand expression
        content = content.replace("Math.PI*0", "0")

        content = re.sub(r"'inde'\s*\+\s*'xOf'", "'indexOf'", content)
        content = re.sub(r"'fr'\s*\+\s*'om'", "'from'", content)
        content = re.sub(r"\['from'\]\s*\+\s*''", "'from'", content)
        content = re.sub(r"String\[gunsder\s*\+\s*\[\s*'C'\s*\+\s*vqjpvi\s*\+\s*'a'\s*\+\s*'r'\]\s*\+\s*\[''\]\s*\+\s*\[\s*'C'\s*\+\s*'o'\s*\+\s*'de'\]\]", "String.fromCharCode", content)
        content = content.replace("vqjpvi", "validator")
        content = re.sub(r"Math\.PI\s*\*\s*0", "0", content)
        content = re.sub(r"\s*var\s*scvvo0\s*=\s*0;", "", content, flags=re.ASCII)
        content = re.sub(r"-\s*scvvo0\s*", "", content)

        content = re.sub(r"\s*&&\s*xxqneol\(\d+,\s*\d+\)", "", content) # these evaluate to 1 which means true
        content = re.sub(r"true\s*&&\s*", "", content)

        content = re.sub(r"\(\[(\d+)\] \* 1\)", r"\1", content)

        content = re.sub(r"\s*&&\s*gunsder\['indexOf'\]\('r'\)\s*>\s*-1", "", content) # remove useless comparison
        content = re.sub(r"{\s*\d+:\s*(\d+)\s*}\s*\['\d+'\]", r"\1", content) # replace dict obfuscation
        
        content = re.sub(r"try\s*{\s*([a-zA-Z0-9]+\[\d+\]\s+=\s+\d+;)\s+}\s+catch\s+\([a-zA-Z0-9]+\)\s+{\s+if\s+\(.*?\)\s+{\s+.*\s+return.*?;\s+}\s+}", r"\1", content)
        content = re.sub(r"try\s*{\s*[a-zA-Z0-9]+\[\d+\]\s+=\s+[a-zA-Z0-9_]+\(\);\s+}\s+catch\s+\([a-zA-Z0-9]+\)\s+{\s+if\s+\(.*?\)\s+{\s+(.*)\s+return.*?;\s+}\s+}", r"\1", content)

        
        content = re.sub(r"xxqneol", r"getChar", content)


        
        se = re.findall(r"(([a-zA-Z0-9]+\[([0-1])\])\s*=\s*([0-9]+);)", content)
        counter = 1
        for s in se:
            total, string, index, value = s
            string = string.replace("[", "\[")
            string = string.replace("]", "\]")
            if index == "0":
                content = re.sub(string+r",", value+r",", content) 
            elif index == "1":
                content = re.sub(r"\("+string, r"("+value, content)
            else:
                print("ERROR! Unexpected index")

        
        content = re.sub(r"\s+var\s+[a-zA-Z0-9]+\s+=\s+\[\];", r"", content)
        content = re.sub(r"\s+[a-zA-Z0-9]+\[[0-1]\]\s+=\s+\d+;", r"", content)
        

        
        pattern = re.compile(r"\(function\(\)\s+{\s+return getChar\((\d+)\s+.\s+(\d+),\s+'h'\);\s+}\)\(.*?\)")
        for m in re.finditer(pattern, content):
            calc = int(m.group(1)) - int(m.group(2))
            letter = "'{}'".format(chr(calc))
            print(str(calc) + "\t" + letter)
            content = re.sub(r"\(function\(\)\s+{\s+return getChar\(("+m.group(1)+")\s+.\s+("+m.group(2)+"),\s+'h'\);\s+}\)\(.*?\)", letter, content)

        pattern = re.compile(r"\(function\(\)\s+{\s+return getChar\((\d+)\s+.\s+(\d+),\s+'h'\);\s+}")
        for m in re.finditer(pattern, content):
            calc = int(m.group(1)) - int(m.group(2))
            letter = "'{}'".format(chr(calc))
            print(str(calc) + "\t" + letter)
            content = re.sub(r"\(function\(\)\s+{\s+return getChar\(("+m.group(1)+")\s+.\s+("+m.group(2)+"),\s+'h'\);\s+}\(.*?\)", letter, content)

        content = re.sub(r"'\s*\+\s*'", r"", content)

        print("============")

        # String['fromCharCode'](36 - 2)
        pattern = re.compile(r"String\['fromCharCode'\]\((\d+)\s+-\s+(\d+)\)")
        for m in re.finditer(pattern, content):
            calc = int(m.group(1)) - int(m.group(2))
            letter = "'{}'".format(chr(calc))
            print(str(calc) + "\t" + letter)
            content = re.sub(r"String\['fromCharCode'\]\("+m.group(1)+"\s+-\s+"+m.group(2)+"\)", letter, content)
    

def write_content(filename):
    global content
    with open(filename, "w", encoding="utf8") as f:
        f.write(content)

if __name__ == "__main__":
    deobfuscate("target.jse")
    write_content("out.jse")
